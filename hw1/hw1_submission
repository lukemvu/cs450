1
  a
      10
    (+ 5 3 4)
    (- 9 1)
    (/ 6 2)
    (+ (* 2 4) (- 4 6))
    (define a 3)
    (define b (+ a 1))
    (+ a b (* a b))
    (= a b)
    (if (and (> b a) (< b (* a b)))
      b
      a)
    (cond ((= a 4) 6)
        ((= b 4) (+ 6 7 a))
        (else 25))
    (+ 2 (if (> b a) b a))
    (* (cond ((> a b) a)
           ((< a b) b)
           (else -1))
     (+ a 1))
  b
    List uses applicative-order evaluation, where the interpreter evaluates the arguments, then applies. 'If' uses a special form, a restricted type of conditional where there are precisely two cases. If the predicate evaluates to true, then the consequent is evaluated and returned. Otherwise, the alternative is returned. In Alyssa's code using the new-if, the line (sqrt-iter (improve guess x) x) is executed without the conditional good-enough? telling it to or not.
  c
    Problem A
    i
      A procedure definition is expressed here as a compound procedure. The form of a procedure definition is (define (<name> <formal parameters>) <body>). Here f is the name and symbol to be associated with the procedure definition. The first x is part of the formal parameters and correspond to arguments in the body, which is an expression that will yield the value of the procedure.
    ii
      paper
  d
  The first function (def (p) (p)) does not return any value. It's a function that calls on itself, infinitely. The second function returns 0 if the x argument is 0, else it returns whatever the y argument is. Running the (test 0 (p)) function causes an infinite loop on an applicative-order interpreter. The interpreter evaluates first 0, then attempt to evaluate (p). Again, because (p) evaluates to itself, infinitely loops trying to evaluate itself. A normal-order evaluation will fully expand the function then reduce it. (test 0 (p)) is expanded to (if (= 0 0)
      0
      (p))
  Special form 'if' will only evaluate the second expression (p) if the first expression (= 0 0) turns out to be false. Here in this function, (= 0 0) evaluates to true and thus 0 is returned. (p) is never evaluated.
2
(define (p r e)
(cond ((= r 0) 1)
      ((or (= e 0) (= e r)) 1)
      (else (+ (p (- r 1)  e)
               (p (- r 1) (- e 1))))))

   Any element in Pascal's triangle can be evaluated by the sum of two elements above it. Looking at these two values from a row and column perspective, any element is the sum of value of the element in the row above, same column, with the element of the row above, column to the left. Base cases when the element is in column 0 or when row and column are equal always evaluate to 1.
3
4
5
